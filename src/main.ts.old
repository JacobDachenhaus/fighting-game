type Vec2 = {
    x: number;
    y: number;
}

type Dictionary = {
    [key: string]: any;
}

class KeyboardController {
    public keys: Dictionary = {};

    public registerEventListeners() {
        window.addEventListener('keydown', (event) => this.onKeyDown(event));
        window.addEventListener('keyup', (event) => this.onKeyUp(event));
    }

    public isPressed(key: string) {
        return (key in this.keys && this.keys[key].pressed);
    }

    private onKeyDown(event: KeyboardEvent) {
        if (!(event.key in this.keys)) {
            this.keys[event.key] = {};
        }

        this.keys[event.key].pressed = true;
    }

    private onKeyUp(event: KeyboardEvent) {
        if (!(event.key in this.keys)) { return; }
        this.keys[event.key].pressed = false;
    }
}

class Sprite {
    public ctx: CanvasRenderingContext2D;
    public position: Vec2;
    public velocity: Vec2;

    constructor(ctx: CanvasRenderingContext2D, position: Vec2, velocity: Vec2) {
        this.ctx = ctx;
        this.position = position;
        this.velocity = velocity;
    }

    update() {
        this.position.x += this.velocity.x * 10;
        this.position.y += this.velocity.y * 10;
    }

    render() {
        this.ctx.fillStyle = "#ff0000";
        this.ctx.fillRect(this.position.x, this.position.y, 50, 150);
     }
}

(function main() {
    const canvas = document.createElement("canvas");
    const ctx = <CanvasRenderingContext2D>canvas.getContext("2d");
    const keyboardController = new KeyboardController();
    const gameObjects: Sprite[] = [];
    
    canvas.width = 800;
    canvas.height = 600;
    document.body.appendChild(canvas);

    // Game Objects
    const player = new Sprite(ctx, { x: 0, y: 0 }, { x: 0, y: 0 });

    gameObjects.push(player);

    function setup() {
        keyboardController.registerEventListeners();
    }

    function processInput() {
        const gravity = 0.2;
        let dx = 0;
        let dy = 0;

        if (keyboardController.isPressed("d")) { dx += 1; }
        if (keyboardController.isPressed("a")) { dx -= 1; }
        if (keyboardController.isPressed("s")) { dy += 1; }
        if (keyboardController.isPressed("w")) { dy -= 1; }

        player.velocity.x = dx;
        player.velocity.y = gravity + dy;
    }

    function update() {
        gameObjects.forEach((gameObject) => gameObject.update());
    }

    function render() {
        ctx.fillStyle = "#000";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        gameObjects.forEach((gameObject) => gameObject.render());
    }

    function gameLoop() {
        requestAnimationFrame(gameLoop);
        processInput();
        update();
        render();
    }

    setup();
    requestAnimationFrame(gameLoop);
})();